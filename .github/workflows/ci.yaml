name: "CI Workflow"

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, synchronize]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPO: ${{ secrets.ECR_REPO }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["18.x", "20.x"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.version}}
          cache-dependency-path: "package-lock.json"
          check-latest: true

      - name: Install the dependencies
        run: npm ci

      - name: Lint the Code
        run: npm run lint

  codeScan:
    name: Code Scanning
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{secrets.SONAR_ORG}}
            -Dsonar.projectKey=${{secrets.SONAR_PROJECT_KEY}}
            -Dsonar.sources=.
            -Dsonar.coverage.exclusions=**/*

  dockernize:
    name: Dockernize
    needs: [codeScan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      actions: read
      security-events: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: ${{ secrets.AWS_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build Docker Image
        env:
          REPO_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          docker buildx build -t $REPO_NAME:$TAGS --load \
          --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=$REPO_NAME:cache \
          --cache-from type=registry,ref=$REPO_NAME:cache .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        env:
          REPO_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ steps.meta.outputs.tags }}
        with:
          image-ref: "${{env.REPO_NAME}}:${{env.TAGS}}"
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
            sarif_file: 'trivy-results.sarif'
      
      - name: Push Image to ECR
        if: github.base_ref == 'refs/heads/main'
        env: 
          REPO_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          docker push $REPO_NAME:$TAGS